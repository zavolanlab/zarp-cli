{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#zarp-cli","title":"ZARP-cli","text":"<p>Welcome to the ZARP-cli documentation pages!</p> <p>ZARP-cli is a simple command-line interface for the ZARP workflow for RNA-Seq analysis.</p> <p>Sounds boring? Well, ZARP-cli doesn't just trigger ZARP, but rather supercharges it by providing the following features:</p> <p>Automatically download samples from the Sequence Read Archive (SRA)</p> <p>Automatically download genome annotations with genomepy</p> <p>Automatically infer metadata with HTSinfer (experimental!)</p> <p>Manage ZARP run data and resources in one central, configurable location</p> <p>Once ZARP-cli is installed and configured, you may be able to ZARP an RNA-Seq library with a command like this:</p> <pre><code>zarp SRA1234567\n</code></pre> <p>Does it get easier than that? </p> <p>Where to go from here?</p> <p>Use the menu on the left or the search bar in the page header to navigate through the documentation.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>Briefly, when a ZARP-cli run is triggered, a ZARP-cli configuration object is constructed from parsing default configuration settings and command-line options. A user-specified list of sample references of various supported types is then attached to the configuration object and dereferenced to construct a (potentially) sparse data frame of sample metadata. If necessary, this data frame of samples is then successively completed by applying various sample processor plugins that are built on tools such as <code>genomepy</code> and HTSinfer.</p> <p>For example, if only a remote sample identifier is provided for a given sample, the sample will first be fetched from the remote database via a custom Snakemake workflow based on the SRA Toolkit. Via another custom Snakemake workflow, HTSinfer will then try to infer required metadata such as the source organism and the read orientation from the sample itself. If successful, <code>genomepy</code> then uses the source organism information to fetch the corresponding genome and gene annotations and further amends the sample data frame with this information. At this point, if any metadata is still missing, defaults from the user configuration are applied or dummy data appended, if possible/sensible. If at the end of this process enough information is available to start a ZARP run, the sample will be analyzed.</p>"},{"location":"#how-to-cite","title":"How to cite","text":"<p>If you use ZARP in your work (with or without ZARP-cli), please kindly cite the following article:</p> <p>ZARP: An automated workflow for processing of RNA-seq data Maria Katsantoni, Foivos Gypas, Christina J. Herrmann, Dominik Burri, Maciej Bak, Paula Iborra, Krish Agarwal, Meric Ataman, Anastasiya B\u00f6rsch, Mihaela Zavolan, Alexander Kanitz bioRxiv 2021.11.18.469017 https://doi.org/10.1101/2021.11.18.469017</p>"},{"location":"#training-materials","title":"Training materials","text":"<p>Coming soon...</p>"},{"location":"#info-materials","title":"Info materials","text":""},{"location":"#poster","title":"Poster","text":""},{"location":"#reach-out","title":"Reach out","text":"<p>There are several ways to get in touch with us:</p> <ul> <li>For ZARP usage questions, please use the ZARP Q&amp;A forum   (requires GitHub registration)</li> <li>For feature suggestions and bug reports, please use either the   ZARP-cli or ZARP issue   tracker   (require GitHub registration)</li> <li>For any other requests, please reach out to us via email</li> </ul> <p>Contributors welcome!</p> <p>Open source contributors are always welcome, for ZARP, ZARP-cli or any other of the Zavolab projects. Simply reach out by email to schedule an onboarding call.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":""},{"location":"docstring/","title":"API Overview","text":""},{"location":"docstring/#api-overview","title":"API Overview","text":""},{"location":"docstring/#modules","title":"Modules","text":"<ul> <li><code>abstract_classes</code>: Package for ZARP-cli abstract classes.</li> <li><code>abstract_classes.sample_processor</code>: Abstract sample processor classes.</li> <li><code>cli</code>: Command-line interface client.</li> <li><code>config</code>: Subpackage for handling ZARP-cli configuration.</li> <li><code>config.args</code>: Command-line argument parser class.</li> <li><code>config.constants</code>: Constants.</li> <li><code>config.enums</code>: Configuration enumerators.</li> <li><code>config.init</code>: Handle initialization mode.</li> <li><code>config.mappings</code>: Mappings and lists for ZARP and ZARP-cli models and tables.</li> <li><code>config.models</code>: Configuration models.</li> <li><code>config.parser</code>: Configuration parser.</li> <li><code>config.sample_tables</code>: ZARP sample table processing.</li> <li><code>config.samples</code>: ZARP sample processing.</li> <li><code>plugins</code>: Subpackage for ZARP-cli plugins.</li> <li><code>plugins.sample_dereferencers</code>: Subpackage for ZARP-cli sample dereferencer plugins.</li> <li><code>plugins.sample_fetchers</code>: Subpackage for ZARP-cli sample fetcher plugins.</li> <li><code>plugins.sample_fetchers.sra</code>: Fetch remote samples from SRA.</li> <li><code>plugins.sample_processors</code>: Subpackage for ZARP-cli sample processor plugins.</li> <li><code>plugins.sample_processors.defaults</code>: Set missing metadata defaults.</li> <li><code>plugins.sample_processors.dummy_data</code>: Fill in missing metadata with dummy data.</li> <li><code>plugins.sample_processors.genomepy</code>: Fetch genome resources with <code>mod:genomepy</code>.</li> <li><code>plugins.sample_processors.htsinfer</code>: Infer missing sample metadata with HTSinfer.</li> <li><code>runner</code>: Subpackage for ZARP-cli runners.</li> <li><code>runner.zarp_runner</code>: Infer missing sample metadata with HTSinfer.</li> <li><code>samples</code>: Subpackage for ZARP sample-related classes and functions.</li> <li><code>samples.sample_record_processor</code>: Interact with ZARP sample records.</li> <li><code>samples.sample_table_processor</code>: Read and write ZARP sample tables.</li> <li><code>snakemake</code>: Subpackage for ZARP-cli interaction with Snakemake.</li> <li><code>snakemake.config_file_processor</code>: Snakemake config file processor.</li> <li><code>snakemake.run</code>: Module for executing Snakemake workflows.</li> <li><code>utils</code>: ZARP-cli utilities.</li> <li><code>version</code>: Single source of truth for package version.</li> <li><code>zarp</code>: Main class and entry point when imported as a library.</li> </ul>"},{"location":"docstring/#classes","title":"Classes","text":"<ul> <li><code>sample_processor.SampleProcessor</code>: Abstract sample processor class.</li> <li><code>args.ArgParser</code>: ZARP-cli argument parser class.</li> <li><code>enums.DependencyEmbeddingStrategies</code>: Supported dependency embedding strategies.</li> <li><code>enums.ExecModes</code>: Execution modes.</li> <li><code>enums.FieldNameMappingDirection</code>: Field name direction enumerator.</li> <li><code>enums.LogLevels</code>: Log level enumerator.</li> <li><code>enums.ReadOrientation</code>: Read orientation types.</li> <li><code>enums.SampleReferenceTypes</code>: Types of sample references.</li> <li><code>enums.SnakemakeRunState</code>: Snakemake run states.</li> <li><code>init.Initializer</code>: Handler for app initialization.</li> <li><code>models.Config</code>: ZARP-cli main configuration.</li> <li><code>models.ConfigFileContent</code>: Snakemake configuration file content.</li> <li><code>models.ConfigFileHTSinfer</code>: HTSinfer workflow configuration file content.</li> <li><code>models.ConfigFileSRA</code>: SRA download workflow configuration file content.</li> <li><code>models.ConfigFileZARP</code>: ZARP workflow configuration file content.</li> <li><code>models.ConfigRun</code>: Run-specific parameters.</li> <li><code>models.ConfigSample</code>: Sample-specific parameters.</li> <li><code>models.ConfigUser</code>: User-specific parameters.</li> <li><code>models.CustomBaseModel</code>: Base model that all other models derive from.</li> <li><code>models.InitConfig</code>: ZARP-cli user default configuration set during initialization.</li> <li><code>models.InitRun</code>: Run-specific parameters for initialization.</li> <li><code>models.InitSample</code>: Sample-specific parameters for initialization.</li> <li><code>models.InitUser</code>: User-specific parameters for initialization.</li> <li><code>models.Sample</code>: Sample-specific parameters.</li> <li><code>models.SampleReference</code>: Sample reference information.</li> <li><code>parser.ConfigParser</code>: Configuration parser for ZARP-cli.</li> <li><code>sample_tables.SampleTableProcessor</code>: Process ZARP sample tables.</li> <li><code>samples.SampleProcessor</code>: Process ZARP samples.</li> <li><code>sra.SampleFetcherSRA</code>: Fetch remote samples from SRA.</li> <li><code>defaults.SampleProcessorDefaults</code>: Set available defaults for missing sample metadata.</li> <li><code>dummy_data.SampleProcessorDummyData</code>: Set dummy data for missing sample metadata, as required by ZARP.</li> <li><code>genomepy.SampleProcessorGenomePy</code>: Fetch genome resources with <code>mod:genomepy</code>.</li> <li><code>htsinfer.SampleProcessorHTSinfer</code>: Infer metadata with HTSinfer.</li> <li><code>zarp_runner.SampleRunnerZARP</code>: Infer metadata with HTSinfer.</li> <li><code>sample_record_processor.SampleRecordProcessor</code>: ZARP sample record processor class.</li> <li><code>config_file_processor.ConfigFileProcessor</code>: Write Snakemake configuration files.</li> <li><code>run.SnakemakeExecutor</code>: Run snakemake with system calls.</li> <li><code>zarp.ZARP</code>: Handle ZARP workflow execution.</li> </ul>"},{"location":"docstring/#functions","title":"Functions","text":"<ul> <li><code>cli.main</code>: Entry point for CLI executable.</li> <li><code>cli.setup_logging</code>: Configure logging.</li> <li><code>sample_table_processor.read</code>: Set records from sample table file.</li> <li><code>sample_table_processor.write</code>: Write sample table.</li> <li><code>utils.generate_id</code>: Generate random string.</li> <li><code>utils.list_get</code>: Get an item from a list by index or return a default value.</li> <li><code>utils.remove_none</code>: Remove <code>None</code> values from a (nested) dictionary.</li> <li><code>utils.resolve_paths</code>: Resolve relative sample paths against a defined anchor.</li> <li><code>utils.sanitize_strings</code>: Sanitize strings.</li> </ul>"},{"location":"docstring/abstract_classes/","title":"Abstract classes","text":""},{"location":"docstring/abstract_classes/#module-abstract_classes","title":"module <code>abstract_classes</code>","text":"<p>Package for ZARP-cli abstract classes. </p>"},{"location":"docstring/abstract_classes.sample_processor/","title":"Abstract classes.sample processor","text":""},{"location":"docstring/abstract_classes.sample_processor/#module-abstract_classessample_processor","title":"module <code>abstract_classes.sample_processor</code>","text":"<p>Abstract sample processor classes. </p>"},{"location":"docstring/abstract_classes.sample_processor/#global-variables","title":"Global Variables","text":"<ul> <li>columns_model</li> </ul>"},{"location":"docstring/abstract_classes.sample_processor/#class-sampleprocessor","title":"class <code>SampleProcessor</code>","text":"<p>Abstract sample processor class. </p> <p>Defines methods to process sample records. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/abstract_classes.sample_processor/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    config: Config,\n    records: DataFrame = Empty DataFrame\nColumns: [name, source, annotations, reference_sequences, fragment_length_distribution_sd, fragment_length_distribution_mean, read_orientation, star_sjdb_overhang, salmon_kmer_size, paths_1, paths_2, adapter_3p_1, adapter_3p_2, adapter_5p_1, adapter_5p_2, adapter_poly_3p_1, adapter_poly_3p_2, adapter_poly_5p_1, adapter_poly_5p_2, sequencing_mode, assembly, identifier, source_sanitized, type]\nIndex: []\n) \u2192 None\n</code></pre> <p>Class constructor method. </p> <p></p>"},{"location":"docstring/abstract_classes.sample_processor/#method-process","title":"method <code>process</code>","text":"<pre><code>process() \u2192 DataFrame\n</code></pre> <p>Process records. </p>"},{"location":"docstring/cli/","title":"Cli","text":""},{"location":"docstring/cli/#module-cli","title":"module <code>cli</code>","text":"<p>Command-line interface client. </p> <p></p>"},{"location":"docstring/cli/#function-setup_logging","title":"function <code>setup_logging</code>","text":"<pre><code>setup_logging(verbosity: str = 'INFO') \u2192 None\n</code></pre> <p>Configure logging. </p> <p></p>"},{"location":"docstring/cli/#function-main","title":"function <code>main</code>","text":"<pre><code>main() \u2192 None\n</code></pre> <p>Entry point for CLI executable. </p>"},{"location":"docstring/config.args/","title":"Config.args","text":""},{"location":"docstring/config.args/#module-configargs","title":"module <code>config.args</code>","text":"<p>Command-line argument parser class. </p> <p></p>"},{"location":"docstring/config.args/#class-argparser","title":"class <code>ArgParser</code>","text":"<p>ZARP-cli argument parser class. </p> <p></p>"},{"location":"docstring/config.args/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(args: Optional[Sequence[str]] = None)\n</code></pre> <p>Class constructor. </p> <p>Args:</p> <ul> <li><code>args</code>:  Command-line arguments. </li> </ul> <p>Attributes:</p> <ul> <li><code>args</code>:  Command-line arguments. </li> <li><code>args_parsed</code>:  Parsed command-line arguments. </li> <li><code>parser</code>:  Argument parser object. </li> </ul> <p></p>"},{"location":"docstring/config.args/#method-parse_arguments","title":"method <code>parse_arguments</code>","text":"<pre><code>parse_arguments() \u2192 None\n</code></pre> <p>Parse arguments. </p> <p></p>"},{"location":"docstring/config.args/#method-process_arguments","title":"method <code>process_arguments</code>","text":"<pre><code>process_arguments() \u2192 None\n</code></pre> <p>Process arguments. </p> <p></p>"},{"location":"docstring/config.args/#method-set_argument_groups","title":"method <code>set_argument_groups</code>","text":"<pre><code>set_argument_groups(attr: str = 'grouped') \u2192 None\n</code></pre> <p>Parse command line (CLI) arguments. </p> <p>Returns:   Parsed CLI arguments </p> <p></p>"},{"location":"docstring/config.args/#method-set_arguments","title":"method <code>set_arguments</code>","text":"<pre><code>set_arguments() \u2192 None\n</code></pre> <p>Add arguments. </p> <p></p>"},{"location":"docstring/config.args/#method-set_parser","title":"method <code>set_parser</code>","text":"<pre><code>set_parser() \u2192 None\n</code></pre> <p>Instantiate argument parser. </p>"},{"location":"docstring/config.constants/","title":"Config.constants","text":""},{"location":"docstring/config.constants/#module-configconstants","title":"module <code>config.constants</code>","text":"<p>Constants. </p>"},{"location":"docstring/config.constants/#global-variables","title":"Global Variables","text":"<ul> <li>DUMMY_DATA</li> </ul>"},{"location":"docstring/config.enums/","title":"Config.enums","text":""},{"location":"docstring/config.enums/#module-configenums","title":"module <code>config.enums</code>","text":"<p>Configuration enumerators. </p> <p></p>"},{"location":"docstring/config.enums/#class-dependencyembeddingstrategies","title":"class <code>DependencyEmbeddingStrategies</code>","text":"<p>Supported dependency embedding strategies. </p> <p>Attributes:</p> <ul> <li><code>CONDA</code>:  Use binaries from Conda. </li> <li><code>SINGULARITY</code>:  Use Singularity containers. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-execmodes","title":"class <code>ExecModes</code>","text":"<p>Execution modes. </p> <p>Attributes:</p> <ul> <li><code>DRY_RUN</code>:  Do not download any files, infer parameters or start the  analysis workflow. </li> <li><code>PREPARE_RUN</code>:  Download files and infer parameters, but do not start the  analysis workflow. </li> <li><code>RUN</code>:   Download files, infer parameters and start the analysis workflow. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-loglevels","title":"class <code>LogLevels</code>","text":"<p>Log level enumerator. </p> <p>Attributes:</p> <ul> <li><code>DEBUG</code>:  Logging level for debug messages. </li> <li><code>INFO</code>:  Logging level for info messages. </li> <li><code>WARNING</code>:  Logging level for warning messages. </li> <li><code>ERROR</code>:  Logging level for error messages. </li> <li><code>CRITICAL</code>:  Logging level for critical error messages. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-fieldnamemappingdirection","title":"class <code>FieldNameMappingDirection</code>","text":"<p>Field name direction enumerator. </p> <p>Attributes:</p> <ul> <li><code>TO_MODEL_PROPERTIES</code>:  Map from ZARP sample table column to model  property names. </li> <li><code>TO_TABLE_COL_NAMES</code>:  Map from model property to ZARP sample table column  names. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-readorientation","title":"class <code>ReadOrientation</code>","text":"<p>Read orientation types. </p> <p>Cf. https://salmon.readthedocs.io/en/latest/library_type.html </p> <p>Attributes:</p> <ul> <li><code>STRANDED_FORWARD</code>:  Reads are stranded and come from the forward strand. </li> <li><code>STRANDED_REVERSE</code>:  Reads are stranded and come from the reverse strand. </li> <li><code>UNSTRANDED</code>:  Reads are unstranded. </li> <li><code>INWARD_STRANDED_FORWARD</code>:  Mates are oriented toward each other, the  library is stranded, and first mates come from the forward strand. </li> <li><code>INWARD_STRANDED_REVERSE</code>:  Mates are oriented toward each other, the  library is stranded, and first mates come from the reverse strand. </li> <li><code>INWARD_UNSTRANDED</code>:  Mates are oriented toward each other and the library  is unstranded. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-samplereferencetypes","title":"class <code>SampleReferenceTypes</code>","text":"<p>Types of sample references. </p> <p>Attributes:</p> <ul> <li><code>LOCAL_LIB_SINGLE</code>:  Local single-ended sequencing library. </li> <li><code>LOCAL_LIB_PAIRED</code>:  Local paired-ended sequencing library. </li> <li><code>REMOTE_LIB_SRA</code>:  Sequencing library available at read archive. </li> <li><code>TABLE</code>:  ZARP sample table. </li> <li><code>INVALID</code>:  Reference type invalid. </li> </ul> <p></p>"},{"location":"docstring/config.enums/#class-snakemakerunstate","title":"class <code>SnakemakeRunState</code>","text":"<p>Snakemake run states. </p> <p>Attributes:</p> <ul> <li><code>UNKNOWN</code>:  The Snakemake run state is unknown. This is typically the case  when a run was initialized but the state has not yet been updated  to a definite state. </li> <li><code>SUCCESS</code>:  The Snakemake run completed successfully. </li> <li><code>ERROR</code>:  The Snakemake run failed. </li> </ul>"},{"location":"docstring/config.init/","title":"Config.init","text":""},{"location":"docstring/config.init/#module-configinit","title":"module <code>config.init</code>","text":"<p>Handle initialization mode. </p> <p>DEPRECATED: This module is deprecated and will be removed in a future release. </p> <p>A replacement will be provided in the package <code>:mod:zarp</code>. </p> <p></p>"},{"location":"docstring/config.init/#class-initializer","title":"class <code>Initializer</code>","text":"<p>Handler for app initialization. </p> <p>Attributes:</p> <ul> <li><code>config</code>:  Configuration model instance. </li> </ul> <p></p>"},{"location":"docstring/config.init/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/config.init/#method-set_from_file","title":"method <code>set_from_file</code>","text":"<pre><code>set_from_file(config_file: Path) \u2192 None\n</code></pre> <p>Set configuration based on configuration file contents. </p> <p>Args:</p> <ul> <li><code>config_file</code>:  Path to YAML file containing the initialization  configuration. </li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>:  Contents are not valid YAML. </li> </ul> <p></p>"},{"location":"docstring/config.init/#method-set_from_user_input","title":"method <code>set_from_user_input</code>","text":"<pre><code>set_from_user_input() \u2192 None\n</code></pre> <p>Update configuration based on user input. </p> <p></p>"},{"location":"docstring/config.init/#method-write_yaml","title":"method <code>write_yaml</code>","text":"<pre><code>write_yaml(contents: BaseModel, path: Path) \u2192 None\n</code></pre> <p>Write Pydantic model to YAML file. </p> <p>Args:</p> <ul> <li><code>contents</code>:  <code>:mod:Pydantic</code> model to be written. </li> <li><code>path</code>:  Path to YAML output file. </li> </ul> <p>Raises:</p> <ul> <li><code>OSError</code>:  File could not be written. </li> <li><code>ValueError</code>:  Contents are not valid YAML. </li> </ul>"},{"location":"docstring/config.mappings/","title":"Config.mappings","text":""},{"location":"docstring/config.mappings/#module-configmappings","title":"module <code>config.mappings</code>","text":"<p>Mappings and lists for ZARP and ZARP-cli models and tables. </p>"},{"location":"docstring/config.mappings/#global-variables","title":"Global Variables","text":"<ul> <li>map_zarp_to_model</li> <li>map_model_to_zarp</li> <li>map_model_to_sra_in</li> <li>map_sra_out_to_model</li> <li>columns_sra_in</li> <li>columns_sra_out</li> <li>columns_zarp_path</li> <li>columns_zarp</li> <li>columns_model</li> </ul>"},{"location":"docstring/config/","title":"Config","text":""},{"location":"docstring/config/#module-config","title":"module <code>config</code>","text":"<p>Subpackage for handling ZARP-cli configuration. </p>"},{"location":"docstring/config.models/","title":"Config.models","text":""},{"location":"docstring/config.models/#module-configmodels","title":"module <code>config.models</code>","text":"<p>Configuration models. </p> <p></p>"},{"location":"docstring/config.models/#class-custombasemodel","title":"class <code>CustomBaseModel</code>","text":"<p>Base model that all other models derive from. </p> <p></p>"},{"location":"docstring/config.models/#class-inituser","title":"class <code>InitUser</code>","text":"<p>User-specific parameters for initialization. </p> <p>Args:</p> <ul> <li><code>author</code>:  Name of the person running the analysis. </li> <li><code>email</code>:  Email address of the person running the analysis. </li> <li><code>logo</code>:  Path or URL pointing to image file to be used as a logo  in the run report. </li> <li><code>url</code>:  A URL with additional information about the author or their  affiliation. </li> </ul> <p>Attributes:</p> <ul> <li><code>author</code>:  Name of the person running the analysis. </li> <li><code>email</code>:  Email address of the person running the analysis. </li> <li><code>logo</code>:  Path or URL pointing to image file to be used as a logo  in the run report. </li> <li><code>url</code>:  A URL with additional information about the author or their  affiliation. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-initrun","title":"class <code>InitRun</code>","text":"<p>Run-specific parameters for initialization. </p> <p>Args:</p> <ul> <li><code>cores</code>:  Cores to be used by the workflow engine. </li> <li><code>dependency_embedding</code>:  Dependency embedding strategy to use. </li> <li><code>execution_mode</code>:  Execution mode to use. </li> <li><code>genome_assemblies_map</code>:  Genome assemblies mapping file. </li> <li><code>profile</code>:  Snakemake profile for ZARP workflow. </li> <li><code>resources_version</code>:  Version of Ensembl genome resources to use when  resources are not provided. </li> <li><code>rule_config</code>:  ZARP rule configuration. </li> <li><code>working_directory</code>:  Root directory for all runs. </li> <li><code>zarp_directory</code>:  Root directory of the ZARP repository. </li> </ul> <p>Attributes:</p> <ul> <li><code>cores</code>:  Cores to be used by the workflow engine. </li> <li><code>dependency_embedding</code>:  Dependency embedding strategy to use. </li> <li><code>execution_mode</code>:  Execution mode to use. </li> <li><code>genome_assemblies_map</code>:  Genome assemblies mapping file. </li> <li><code>profile</code>:  Snakemake profile for ZARP workflow. </li> <li><code>resources_version</code>:  Version of Ensembl genome resources to use when  resources are not provided. </li> <li><code>rule_config</code>:  ZARP rule configuration. </li> <li><code>working_directory</code>:  Root directory for all runs. </li> <li><code>zarp_directory</code>:  Root directory of the ZARP repository. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-initsample","title":"class <code>InitSample</code>","text":"<p>Sample-specific parameters for initialization. </p> <p>Args:</p> <ul> <li><code>fragment_length_distribution_mean</code>:  Mean of the fragment length  distribution. </li> <li><code>fragment_length_distribution_sd</code>:  Standard deviation of the fragment  length distribution. </li> </ul> <p>Attributes:</p> <ul> <li><code>fragment_length_distribution_mean</code>:  Mean of the fragment length  distribution. </li> <li><code>fragment_length_distribution_sd</code>:  Standard deviation of the fragment  length distribution. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-initconfig","title":"class <code>InitConfig</code>","text":"<p>ZARP-cli user default configuration set during initialization. </p> <p>Args:</p> <ul> <li><code>run</code>:  Run-specific parameters. </li> <li><code>sample</code>:  Sample-specific parameters. </li> <li><code>user</code>:  User-specific parameters. </li> </ul> <p>Attributes:</p> <ul> <li><code>run</code>:  Run-specific parameters. </li> <li><code>sample</code>:  Sample-specific parameters. </li> <li><code>user</code>:  User-specific parameters. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-configuser","title":"class <code>ConfigUser</code>","text":"<p>User-specific parameters. </p> <p></p>"},{"location":"docstring/config.models/#class-configrun","title":"class <code>ConfigRun</code>","text":"<p>Run-specific parameters. </p> <p>Args:</p> <ul> <li><code>description</code>:  Run description. </li> <li><code>genome_assemblies_map</code>:  Genome assemblies mapping file. </li> <li><code>identifier</code>:  Unique identifier for a run. </li> <li><code>zarp_directory</code>:  Root directory of the ZARP repository. </li> </ul> <p>Attributes:</p> <ul> <li><code>description</code>:  Run description. </li> <li><code>genome_assemblies_map</code>:  Genome assemblies mapping file. </li> <li><code>identifier</code>:  Unique identifier for a run. </li> <li><code>zarp_directory</code>:  Root directory of the ZARP repository. </li> </ul> <p></p>"},{"location":"docstring/config.models/#classmethod-get_identifier","title":"classmethod <code>get_identifier</code>","text":"<pre><code>get_identifier(identifier: str) \u2192 str\n</code></pre> <p>Get default identifier. </p> <p></p>"},{"location":"docstring/config.models/#class-configsample","title":"class <code>ConfigSample</code>","text":"<p>Sample-specific parameters. </p> <p>Args:</p> <ul> <li><code>adapter_3p</code>:  Tuple of adapter sequences to truncate from the 3'-ends of  single-end/first and second mate libraries, respectively. </li> <li><code>adapter_5p</code>:  Tuple of adapter sequences to truncate from the 5'-ends of  single-end/first and second mate libraries, respectively. </li> <li><code>adapter_poly_3p</code>:  Tuple of polynucleotide stretch sequences to truncate  from the 3'-ends of single-end/first and second mate libraries,  respectively. </li> <li><code>adapter_poly_5p</code>:  Tuple of polynucleotide stretch sequences to truncate  from the 3'-ends of single-end/first and second mate libraries,  respectively. </li> <li><code>annotations</code>:  Path to GTF file containing gene annotations for the  <code>reference_sequences</code>. </li> <li><code>read_orientation</code>:  Orientation of reads in sequencing library. Cf. </li> <li><code>https</code>: //salmon.readthedocs.io/en/latest/library_type.html. </li> <li><code>reference_sequences</code>:  Path to FASTA file containing reference sequences  to align reads against, typically chromosome sequences. </li> <li><code>source</code>:  Origin of the sample as either a NCBI taxonomy database  identifier, e.g, <code>9606</code> for humans, or the corresponding full name,  e.g., \"Homo sapiens\". </li> <li><code>star_sjdb_overhang</code>:  Overhang length for splice junctions in STAR (  parameter <code>sjdbOverhang</code>). Ideally the maximum read length minus 1.  Lower values may result in decreased mapping accuracy, while higher  values may result in longer processing times. Cf. </li> <li><code>https</code>: //github.com/alexdobin/STAR/blob/3ae0966bc604a944b1993f49aaeb597e809eb5c9/doc/STARmanual.pdf </li> <li><code>salmon_kmer_size</code>:  Size of k-mers for building the Salmon index. The  default value typically works fine for reads of 75 bp or longer.  Consider using lower values if dealing with shorter reads. Cf. </li> <li><code>https</code>: //salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode </li> </ul> <p>Attributes:</p> <ul> <li><code>adapter_3p</code>:  Tuple of adapter sequences to truncate from the 3'-ends of  single-end/first and second mate libraries, respectively. </li> <li><code>adapter_5p</code>:  Tuple of adapter sequences to truncate from the 5'-ends of  single-end/first and second mate libraries, respectively. </li> <li><code>adapter_poly_3p</code>:  Tuple of polynucleotide stretch sequences to truncate  from the 3'-ends of single-end/first and second mate libraries,  respectively. </li> <li><code>adapter_poly_5p</code>:  Tuple of polynucleotide stretch sequences to truncate  from the 3'-ends of single-end/first and second mate libraries,  respectively. </li> <li><code>annotations</code>:  Path to GTF file containing gene annotations for the  <code>reference_sequences</code>. </li> <li><code>read_orientation</code>:  Orientation of reads in sequencing library. Cf. </li> <li><code>https</code>: //salmon.readthedocs.io/en/latest/library_type.html. </li> <li><code>reference_sequences</code>:  Path to FASTA file containing reference sequences  to align reads against, typically chromosome sequences. </li> <li><code>source</code>:  Origin of the sample as either a NCBI taxonomy database  identifier, e.g, <code>9606</code> for humans, or the corresponding full name,  e.g., \"Homo sapiens\". </li> <li><code>star_sjdb_overhang</code>:  Overhang length for splice junctions in STAR (  parameter <code>sjdbOverhang</code>). Ideally the maximum read length minus 1.  Lower values may result in decreased mapping accuracy, while higher  values may result in longer processing times. Cf. </li> <li><code>https</code>: //github.com/alexdobin/STAR/blob/3ae0966bc604a944b1993f49aaeb597e809eb5c9/doc/STARmanual.pdf </li> <li><code>salmon_kmer_size</code>:  Size of k-mers for building the Salmon index. The  default value typically works fine for reads of 75 bp or longer.  Consider using lower values if dealing with shorter reads. Cf. </li> <li><code>https</code>: //salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-config","title":"class <code>Config</code>","text":"<p>ZARP-cli main configuration. </p> <p>Args:</p> <ul> <li><code>ref</code>:  References to individual sequencing libraries by local file path  or read archive identifiers OR paths to ZARP sample tables; see  documentation for details. </li> <li><code>run</code>:  Run-specific parameters. </li> <li><code>sample</code>:  Sample-specific parameters. </li> <li><code>user</code>:  User-specific parameters. </li> </ul> <p>Attributes:</p> <ul> <li><code>ref</code>:  References to individual sequencing libraries by local file path  or read archive identifiers OR paths to ZARP sample tables; see  documentation for details. </li> <li><code>run</code>:  Run-specific parameters. </li> <li><code>sample</code>:  Sample-specific parameters. </li> <li><code>user</code>:  User-specific parameters. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-samplereference","title":"class <code>SampleReference</code>","text":"<p>Sample reference information. </p> <p>Args:</p> <ul> <li><code>identifier</code>:  Read archive identifier. </li> <li><code>lib_paths</code>:  Path (single-ended) or paths (paired-ended) to files  containing sequencing reads. </li> <li><code>name</code>:  Sample name. </li> <li><code>ref</code>:  References to individual sequencing libraries by local file path  or read archive identifiers OR paths to ZARP sample tables; see  documentation for details. </li> <li><code>table_path</code>:  Path to ZARP sample table. </li> <li><code>type</code>:  Type of sample reference. </li> </ul> <p>Attributes:</p> <ul> <li><code>identifier</code>:  Read archive identifier. </li> <li><code>lib_paths</code>:  Path (single-ended) or paths (paired-ended) to files  containing sequencing reads. </li> <li><code>name</code>:  Sample name. </li> <li><code>ref</code>:  References to individual sequencing libraries by local file path  or read archive identifiers OR paths to ZARP sample tables; see  documentation for details. </li> <li><code>table_path</code>:  Path to ZARP sample table. </li> <li><code>type</code>:  Type of sample reference. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-sample","title":"class <code>Sample</code>","text":"<p>Sample-specific parameters. </p> <p>Args:</p> <ul> <li><code>type</code>:  Type of sample, local (single/paired) or remote. </li> <li><code>identifier</code>:  Read archive identifier. </li> <li><code>name</code>:  Sample name; if not provided, a sample name will be set based on  the input file name or read archive identifier. </li> <li><code>paths</code>:  Path (single-ended) or paths (paired-ended) to files containing  sequencing reads. </li> </ul> <p>Attributes:</p> <ul> <li><code>type</code>:  Type of sample, local (single/paired) or remote. </li> <li><code>identifier</code>:  Read archive identifier. </li> <li><code>name</code>:  Sample name; if not provided, a sample name will be set based on  the input file name or read archive identifier. </li> <li><code>paths</code>:  Path (single-ended) or paths (paired-ended) to files containing  sequencing reads. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-configfilecontent","title":"class <code>ConfigFileContent</code>","text":"<p>Snakemake configuration file content. </p> <p></p>"},{"location":"docstring/config.models/#class-configfilesra","title":"class <code>ConfigFileSRA</code>","text":"<p>SRA download workflow configuration file content. </p> <p>Args:</p> <ul> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>outdir</code>:  Path to output directory. </li> <li><code>samples</code>:  Path to sample table. </li> <li><code>samples_out</code>:  Path to output sample table. </li> </ul> <p>Attributes:</p> <ul> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>outdir</code>:  Path to output directory. </li> <li><code>samples</code>:  Path to sample table. </li> <li><code>samples_out</code>:  Path to output sample table. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-configfilehtsinfer","title":"class <code>ConfigFileHTSinfer</code>","text":"<p>HTSinfer workflow configuration file content. </p> <p>Args:</p> <ul> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>samples</code>:  Path to sample table. </li> <li><code>outdir</code>:  Path to output directory. </li> <li><code>samples_out</code>:  Path to output sample table. </li> </ul> <p>Attributes:</p> <ul> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>samples</code>:  Path to sample table. </li> <li><code>outdir</code>:  Path to output directory. </li> <li><code>samples_out</code>:  Path to output sample table. </li> </ul> <p></p>"},{"location":"docstring/config.models/#class-configfilezarp","title":"class <code>ConfigFileZARP</code>","text":"<p>ZARP workflow configuration file content. </p> <p>Args:</p> <ul> <li><code>samples</code>:  Path to sample table. </li> <li><code>output_dir</code>:  Path to output directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>kallisto_indexes</code>:  Path to kallisto indexes. </li> <li><code>salmon_indexes</code>:  Path to Salmon indexes. </li> <li><code>star_indexes</code>:  Path to STAR indexes. </li> <li><code>alfa_indexes</code>:  Path to ALFA indexes. </li> <li><code>rule_config</code>:  Path to ZARP rule configuration. </li> <li><code>report_description</code>:  Run report description. </li> <li><code>report_logo</code>:  Path or URL pointing to image file to be used as a logo  for the run report. </li> <li><code>report_url</code>:  URL to link to from the run report. </li> <li><code>author_name</code>:  Name of the person running the analysis. </li> <li><code>author_email</code>:  Email address of the person running the analysis. </li> </ul> <p>Attributes:</p> <ul> <li><code>samples</code>:  Path to sample table. </li> <li><code>output_dir</code>:  Path to output directory. </li> <li><code>log_dir</code>:  Path to log directory. </li> <li><code>cluster_log_dir</code>:  Path to cluster log directory. </li> <li><code>kallisto_indexes</code>:  Path to kallisto indexes. </li> <li><code>salmon_indexes</code>:  Path to Salmon indexes. </li> <li><code>star_indexes</code>:  Path to STAR indexes. </li> <li><code>alfa_indexes</code>:  Path to ALFA indexes. </li> <li><code>report_description</code>:  Run report description. </li> <li><code>report_logo</code>:  Path or URL pointing to image file to be used as a logo  for the run report. </li> <li><code>report_url</code>:  URL to link to from the run report. </li> <li><code>author_name</code>:  Name of the person running the analysis. </li> <li><code>author_email</code>:  Email address of the person running the analysis. </li> </ul>"},{"location":"docstring/config.parser/","title":"Config.parser","text":""},{"location":"docstring/config.parser/#module-configparser","title":"module <code>config.parser</code>","text":"<p>Configuration parser. </p> <p></p>"},{"location":"docstring/config.parser/#class-configparser","title":"class <code>ConfigParser</code>","text":"<p>Configuration parser for ZARP-cli. </p> <p>Args:</p> <ul> <li><code>config_file</code>:  Path to ZARP-cli configuration file. </li> </ul> <p>Attributes:</p> <ul> <li><code>config_file</code>:  Path to ZARP-cli configuration file. </li> <li><code>config</code>:  ZARP-cli configuration. </li> </ul> <p></p>"},{"location":"docstring/config.parser/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(config_file: Union[Path, str])\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/config.parser/#method-parse_yaml","title":"method <code>parse_yaml</code>","text":"<pre><code>parse_yaml(path: Path) \u2192 Dict\n</code></pre> <p>Serialize YAML file contents into a dictionary. </p> <p>Args:</p> <ul> <li><code>path</code>:  Path to YAML file. </li> </ul> <p>Returns:  Serialized YAML file contents. </p> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>:  File does not exist. </li> <li><code>OSError</code>:  File could not be read. </li> <li><code>ValueError</code>:  File is not valid YAML. </li> </ul> <p></p>"},{"location":"docstring/config.parser/#method-set_from_file","title":"method <code>set_from_file</code>","text":"<pre><code>set_from_file() \u2192 None\n</code></pre> <p>Set configuration based on configuration file. </p> <p>Raises:</p> <ul> <li><code>ValueError</code>:  Configuration file contains invalid arguments. </li> </ul> <p></p>"},{"location":"docstring/config.parser/#method-update_from_mapping","title":"method <code>update_from_mapping</code>","text":"<pre><code>update_from_mapping(config_mapping: Mapping) \u2192 None\n</code></pre> <p>Update ZARP-cli configuration from dictionary. </p> <p>Only parameters will be updated for whom arguments are available and which are not <code>None</code>. </p> <p>Args:</p> <ul> <li><code>config_mapping</code>:  Mapping of ZARP-cli configuration items. </li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>:  Configuration could not be updated because either the  currently set configuration or the configuration dictionary  are invalid. </li> </ul>"},{"location":"docstring/config.sample_tables/","title":"Config.sample tables","text":""},{"location":"docstring/config.sample_tables/#module-configsample_tables","title":"module <code>config.sample_tables</code>","text":"<p>ZARP sample table processing. </p> <p>DEPRECATED: This module is deprecated and will be removed in a future release. </p> <p>Use <code>:mod:zarp.samples.sample_table_processor</code> instead. </p> <p></p>"},{"location":"docstring/config.sample_tables/#class-sampletableprocessor","title":"class <code>SampleTableProcessor</code>","text":"<p>Process ZARP sample tables. </p> <p>Read, write and process ZARP sample tables. </p> <p>Args:</p> <ul> <li><code>records</code>:  List of sample table records. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  List of sample table records. </li> </ul> <p></p>"},{"location":"docstring/config.sample_tables/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(records: Optional[List[Dict[str, Any]]] = None) \u2192 None\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/config.sample_tables/#method-read","title":"method <code>read</code>","text":"<pre><code>read(path: Path) \u2192 None\n</code></pre> <p>Read sample table. </p> <p>Args:</p> <ul> <li><code>path</code>:  Path to sample table. </li> </ul> <p></p>"},{"location":"docstring/config.sample_tables/#method-resolve_path","title":"method <code>resolve_path</code>","text":"<pre><code>resolve_path(anchor: Union[Path, str], path: Union[Path, str]) \u2192 Path\n</code></pre> <p>Resolve absolute path relative to an anchor. </p> <p>Args:</p> <ul> <li><code>anchor</code>:  Anchor path. </li> <li><code>path</code>:  Path to resolve. If absolute, will be returned as is, but as  Path object. </li> </ul> <p></p>"},{"location":"docstring/config.sample_tables/#method-write","title":"method <code>write</code>","text":"<pre><code>write(path: Path) \u2192 None\n</code></pre> <p>Write ZARP sample table. </p> <p>Args:</p> <ul> <li><code>path</code>:  Path where sample table is to be written. </li> </ul>"},{"location":"docstring/config.samples/","title":"Config.samples","text":""},{"location":"docstring/config.samples/#module-configsamples","title":"module <code>config.samples</code>","text":"<p>ZARP sample processing. </p> <p>DEPRECATED: This module is deprecated and will be removed in a future release. </p> <p>A replacement will be provided in subpackage <code>:mod:zarp.plugins.sample_dereferencers</code> and will implement the abstract class <code>:class:zarp.abstract_classes.sample_processors.SampleProcessor</code>. </p> <p></p>"},{"location":"docstring/config.samples/#class-sampleprocessor","title":"class <code>SampleProcessor</code>","text":"<p>Process ZARP samples. </p> <p>Resolve sample references, set sample configuration, download remote samples, validate samples and produce a ZARP sample table. </p> <p>Args:</p> <ul> <li><code>*args</code>:  References to individual sequencing libraries by local file path  or read archive identifiers OR paths to ZARP sample tables; see  documentation for details. </li> <li><code>sample_config</code>:  Sample configuration parameters. </li> <li><code>run_config</code>:  Run configuration parameters. </li> </ul> <p>Attributes:</p> <ul> <li><code>references</code>:  References to individual sequencing libraries by local file  path or read archive identifiers OR paths to ZARP sample tables;  see documentation for details. </li> <li><code>sample_config</code>:  Sample configuration parameters. </li> <li><code>run_config</code>:  Run configuration parameters. </li> <li><code>samples</code>:  List of sample objects. </li> <li><code>samples_remote</code>:  List of remote sample objects. </li> </ul> <p></p>"},{"location":"docstring/config.samples/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(*args: str, sample_config: ConfigSample, run_config: ConfigRun) \u2192 None\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/config.samples/#method-set_samples","title":"method <code>set_samples</code>","text":"<pre><code>set_samples() \u2192 None\n</code></pre> <p>Resolve sample references and set sample configuration. </p> <p></p>"},{"location":"docstring/config.samples/#method-write_remote_sample_table","title":"method <code>write_remote_sample_table</code>","text":"<pre><code>write_remote_sample_table(samples: List[Sample], outpath: Path) \u2192 Path\n</code></pre> <p>Write table of remote samples to file. </p> <p>Args:</p> <ul> <li><code>samples</code>:  List of sample objects. </li> <li><code>outpath</code>:  Path to write sample table to. </li> </ul> <p>Returns:  Path to sample table. </p> <p></p>"},{"location":"docstring/config.samples/#method-write_sample_table","title":"method <code>write_sample_table</code>","text":"<pre><code>write_sample_table(samples: List[Sample], outpath: Path) \u2192 Path\n</code></pre> <p>Write table of samples to file. </p> <p>Args:</p> <ul> <li><code>samples</code>:  List of sample objects. </li> <li><code>outpath</code>:  Path to write sample table to. </li> </ul> <p>Returns:  Path to sample table. </p>"},{"location":"docstring/plugins/","title":"Plugins","text":""},{"location":"docstring/plugins/#module-plugins","title":"module <code>plugins</code>","text":"<p>Subpackage for ZARP-cli plugins. </p>"},{"location":"docstring/plugins.sample_dereferencers/","title":"Plugins.sample dereferencers","text":""},{"location":"docstring/plugins.sample_dereferencers/#module-pluginssample_dereferencers","title":"module <code>plugins.sample_dereferencers</code>","text":"<p>Subpackage for ZARP-cli sample dereferencer plugins. </p>"},{"location":"docstring/plugins.sample_fetchers/","title":"Plugins.sample fetchers","text":""},{"location":"docstring/plugins.sample_fetchers/#module-pluginssample_fetchers","title":"module <code>plugins.sample_fetchers</code>","text":"<p>Subpackage for ZARP-cli sample fetcher plugins. </p>"},{"location":"docstring/plugins.sample_fetchers.sra/","title":"Plugins.sample fetchers.sra","text":""},{"location":"docstring/plugins.sample_fetchers.sra/#module-pluginssample_fetcherssra","title":"module <code>plugins.sample_fetchers.sra</code>","text":"<p>Fetch remote samples from SRA. </p>"},{"location":"docstring/plugins.sample_fetchers.sra/#global-variables","title":"Global Variables","text":"<ul> <li>columns_sra_in</li> <li>map_model_to_sra_in</li> <li>map_sra_out_to_model</li> </ul>"},{"location":"docstring/plugins.sample_fetchers.sra/#class-samplefetchersra","title":"class <code>SampleFetcherSRA</code>","text":"<p>Fetch remote samples from SRA. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/plugins.sample_fetchers.sra/#method-process","title":"method <code>process</code>","text":"<pre><code>process(\n    loc: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli'),\n    workflow: Path = PosixPath('Snakefile')\n) \u2192 DataFrame\n</code></pre> <p>Fetch remote samples from SRA. </p> <p>Args:</p> <ul> <li><code>loc</code>:  Path to fetch samples to. Samples may be located within child  directories. Defaults to current working directory. </li> <li><code>workflow</code>:  Path to Snakemake workflow for fetching samples from SRA.  Defaults to <code>Snakefile</code> in current working directory. </li> </ul> <p>Returns: Dataframe with local path information for sequencing libraries. </p>"},{"location":"docstring/plugins.sample_processors.defaults/","title":"Plugins.sample processors.defaults","text":""},{"location":"docstring/plugins.sample_processors.defaults/#module-pluginssample_processorsdefaults","title":"module <code>plugins.sample_processors.defaults</code>","text":"<p>Set missing metadata defaults. </p> <p></p>"},{"location":"docstring/plugins.sample_processors.defaults/#class-sampleprocessordefaults","title":"class <code>SampleProcessorDefaults</code>","text":"<p>Set available defaults for missing sample metadata. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/plugins.sample_processors.defaults/#method-process","title":"method <code>process</code>","text":"<pre><code>process() \u2192 DataFrame\n</code></pre> <p>Set available defaults for missing sample metadata. </p> <p>Returns: Dataframe with set defaults. </p>"},{"location":"docstring/plugins.sample_processors.dummy_data/","title":"Plugins.sample processors.dummy data","text":""},{"location":"docstring/plugins.sample_processors.dummy_data/#module-pluginssample_processorsdummy_data","title":"module <code>plugins.sample_processors.dummy_data</code>","text":"<p>Fill in missing metadata with dummy data. </p>"},{"location":"docstring/plugins.sample_processors.dummy_data/#global-variables","title":"Global Variables","text":"<ul> <li>DUMMY_DATA</li> </ul>"},{"location":"docstring/plugins.sample_processors.dummy_data/#class-sampleprocessordummydata","title":"class <code>SampleProcessorDummyData</code>","text":"<p>Set dummy data for missing sample metadata, as required by ZARP. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/plugins.sample_processors.dummy_data/#method-process","title":"method <code>process</code>","text":"<pre><code>process() \u2192 DataFrame\n</code></pre> <p>Set dummy data for missing sample metadata. </p> <p>Returns: Dataframe with dummy data. </p>"},{"location":"docstring/plugins.sample_processors.genomepy/","title":"Plugins.sample processors.genomepy","text":""},{"location":"docstring/plugins.sample_processors.genomepy/#module-pluginssample_processorsgenomepy","title":"module <code>plugins.sample_processors.genomepy</code>","text":"<p>Fetch genome resources with <code>mod:genomepy</code>. </p> <p></p>"},{"location":"docstring/plugins.sample_processors.genomepy/#class-sampleprocessorgenomepy","title":"class <code>SampleProcessorGenomePy</code>","text":"<p>Fetch genome resources with <code>mod:genomepy</code>. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/plugins.sample_processors.genomepy/#method-fetch_resources","title":"method <code>fetch_resources</code>","text":"<pre><code>fetch_resources(genomes_dir_root: Path) \u2192 Dict[str, Tuple[Path, Path]]\n</code></pre> <p>Fetch assemblies. </p> <p>Args:</p> <ul> <li><code>genomes_dir_root</code>:  Path to fetch assemblies to. </li> </ul> <p>Returns:  Dictionary with genome resource paths. </p> <p></p>"},{"location":"docstring/plugins.sample_processors.genomepy/#method-process","title":"method <code>process</code>","text":"<pre><code>process(\n    loc: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli')\n) \u2192 DataFrame\n</code></pre> <p>Fetch genome resources with <code>mod:genomepy</code>. </p> <p>Args:</p> <ul> <li><code>loc</code>:  Path to fetch resources to. Resources may be located within  child directories. Defaults to current working directory. </li> </ul> <p>Returns: Dataframe with local path information for genome resources. </p> <p></p>"},{"location":"docstring/plugins.sample_processors.genomepy/#method-set_assemblies","title":"method <code>set_assemblies</code>","text":"<pre><code>set_assemblies() \u2192 None\n</code></pre> <p>Set assemblies. </p> <p></p>"},{"location":"docstring/plugins.sample_processors.genomepy/#method-set_resource_paths","title":"method <code>set_resource_paths</code>","text":"<pre><code>set_resource_paths(resource_paths: Dict[str, Tuple[Path, Path]]) \u2192 None\n</code></pre> <p>Set resource paths. </p> <p>Args:</p> <ul> <li><code>resource_paths</code>:  Dictionary with genome resource paths. </li> </ul>"},{"location":"docstring/plugins.sample_processors.htsinfer/","title":"Plugins.sample processors.htsinfer","text":""},{"location":"docstring/plugins.sample_processors.htsinfer/#module-pluginssample_processorshtsinfer","title":"module <code>plugins.sample_processors.htsinfer</code>","text":"<p>Infer missing sample metadata with HTSinfer. </p>"},{"location":"docstring/plugins.sample_processors.htsinfer/#global-variables","title":"Global Variables","text":"<ul> <li>map_model_to_zarp</li> <li>map_zarp_to_model</li> </ul>"},{"location":"docstring/plugins.sample_processors.htsinfer/#class-sampleprocessorhtsinfer","title":"class <code>SampleProcessorHTSinfer</code>","text":"<p>Infer metadata with HTSinfer. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/plugins.sample_processors.htsinfer/#method-process","title":"method <code>process</code>","text":"<pre><code>process(\n    loc: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli'),\n    workflow: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli/Snakefile')\n) \u2192 DataFrame\n</code></pre> <p>Infer metadata with HTSinfer. </p> <p>Args:</p> <ul> <li><code>loc</code>:  Working directory. Data may be located within child  directories. Defaults to current working directory. </li> <li><code>workflow</code>:  Path to Snakemake workflow for running HTSinfer.  Defaults to <code>Snakefile</code> in current working directory. </li> </ul> <p>Returns: Dataframe with inferred sample metadata. </p>"},{"location":"docstring/plugins.sample_processors/","title":"Plugins.sample processors","text":""},{"location":"docstring/plugins.sample_processors/#module-pluginssample_processors","title":"module <code>plugins.sample_processors</code>","text":"<p>Subpackage for ZARP-cli sample processor plugins. </p>"},{"location":"docstring/runner/","title":"Runner","text":""},{"location":"docstring/runner/#module-runner","title":"module <code>runner</code>","text":"<p>Subpackage for ZARP-cli runners. </p>"},{"location":"docstring/runner.zarp_runner/","title":"Runner.zarp runner","text":""},{"location":"docstring/runner.zarp_runner/#module-runnerzarp_runner","title":"module <code>runner.zarp_runner</code>","text":"<p>Infer missing sample metadata with HTSinfer. </p>"},{"location":"docstring/runner.zarp_runner/#global-variables","title":"Global Variables","text":"<ul> <li>map_model_to_zarp</li> <li>map_zarp_to_model</li> </ul>"},{"location":"docstring/runner.zarp_runner/#class-samplerunnerzarp","title":"class <code>SampleRunnerZARP</code>","text":"<p>Infer metadata with HTSinfer. </p> <p>Args:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p>Attributes:</p> <ul> <li><code>records</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>config</code>:  <code>Config</code> object. </li> </ul> <p></p>"},{"location":"docstring/runner.zarp_runner/#method-process","title":"method <code>process</code>","text":"<pre><code>process(\n    loc: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli'),\n    workflow: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli/Snakefile')\n) \u2192 DataFrame\n</code></pre> <p>Infer metadata with HTSinfer. </p> <p>Args:</p> <ul> <li><code>loc</code>:  Working directory. Data may be located within child  directories. Defaults to current working directory. </li> <li><code>workflow</code>:  Path to Snakemake workflow for running HTSinfer.  Defaults to <code>Snakefile</code> in current working directory. </li> </ul> <p>Returns: Dataframe with inferred sample metadata. </p>"},{"location":"docstring/samples/","title":"Samples","text":""},{"location":"docstring/samples/#module-samples","title":"module <code>samples</code>","text":"<p>Subpackage for ZARP sample-related classes and functions. </p>"},{"location":"docstring/samples.sample_record_processor/","title":"Samples.sample record processor","text":""},{"location":"docstring/samples.sample_record_processor/#module-samplessample_record_processor","title":"module <code>samples.sample_record_processor</code>","text":"<p>Interact with ZARP sample records. </p>"},{"location":"docstring/samples.sample_record_processor/#global-variables","title":"Global Variables","text":"<ul> <li>columns_model</li> </ul>"},{"location":"docstring/samples.sample_record_processor/#class-samplerecordprocessor","title":"class <code>SampleRecordProcessor</code>","text":"<p>ZARP sample record processor class. </p> <p>Defines methods to append and update sample records. </p> <p>Attributes:</p> <ul> <li><code>samples</code>:  Sequence of <code>Sample</code> objects. </li> </ul> <p></p>"},{"location":"docstring/samples.sample_record_processor/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre> <p>Class constructor method. </p> <p></p>"},{"location":"docstring/samples.sample_record_processor/#method-append","title":"method <code>append</code>","text":"<pre><code>append(df: DataFrame, **kwargs: Any) \u2192 None\n</code></pre> <p>Append dataframe to records. </p> <p>Duplicate records and extra columns will be dropped. </p> <p>Args:</p> <ul> <li><code>df</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>**kwargs</code>:  Keyword arguments to pass to <code>_sanitize_df()</code>. </li> </ul> <p></p>"},{"location":"docstring/samples.sample_record_processor/#method-append_from_obj","title":"method <code>append_from_obj</code>","text":"<pre><code>append_from_obj(samples: Sequence[Sample], **kwargs: Any) \u2192 None\n</code></pre> <p>Append samples to records. </p> <p>Duplicate records and extra fields will be dropped. </p> <p>Args:</p> <ul> <li><code>samples</code>:  Sequence of <code>Sample</code> objects. </li> <li><code>**kwargs</code>:  Keyword arguments to pass to <code>append()</code>. </li> </ul> <p></p>"},{"location":"docstring/samples.sample_record_processor/#method-update","title":"method <code>update</code>","text":"<pre><code>update(\n    df: DataFrame,\n    by: Optional[str] = None,\n    overwrite: bool = False,\n    **kwargs: Any\n) \u2192 None\n</code></pre> <p>Update records with dataframe. </p> <p>Args:</p> <ul> <li><code>df</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>by</code>:  Column to use as index for update. If <code>None</code> (default),  compares database records by position. </li> <li><code>overwrite</code>:  Overwrite existing records. If <code>False</code> (default),  existing records will not be updated. </li> <li><code>**kwargs</code>:  Keyword arguments to pass to <code>_sanitize_df()</code>. </li> </ul> <p>Raises:</p> <ul> <li><code>KeyError</code>:  Column indicated by <code>by</code> not found in records or  dataframe. </li> <li><code>ValueError</code>:  Records and dataframe have different lengths/rows. </li> </ul> <p></p>"},{"location":"docstring/samples.sample_record_processor/#method-view","title":"method <code>view</code>","text":"<pre><code>view(\n    level: int = 10,\n    rows: Optional[int] = None,\n    columns: Optional[int] = None,\n    width: Optional[int] = None\n) \u2192 None\n</code></pre> <p>Show records. </p> <p>Args:</p> <ul> <li><code>level</code>:  Logging level to use. </li> <li><code>rows</code>:  Number of rows to show. </li> <li><code>columns</code>:  Number of columns to show. </li> <li><code>width</code>:  Maximum column width. </li> </ul>"},{"location":"docstring/samples.sample_table_processor/","title":"Samples.sample table processor","text":""},{"location":"docstring/samples.sample_table_processor/#module-samplessample_table_processor","title":"module <code>samples.sample_table_processor</code>","text":"<p>Read and write ZARP sample tables. </p> <p></p>"},{"location":"docstring/samples.sample_table_processor/#function-read","title":"function <code>read</code>","text":"<pre><code>read(\n    path: Path,\n    index_col: Optional[int] = None,\n    mapping: Optional[Mapping] = None,\n    columns: Optional[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]] = None\n) \u2192 DataFrame\n</code></pre> <p>Set records from sample table file. </p> <p>Args:</p> <ul> <li><code>path</code>:  Sample table path. </li> <li><code>index_col</code>:  Optional index column. </li> <li><code>columns</code>:  Optional list of sample table columns to select. If not  provided, all columns will be selected. Column selection will  occur before column renaming. </li> <li><code>mapping</code>:  Optional mapping of column names to rename columns. </li> </ul> <p>Returns: Pandas <code>DataFrame</code> object. </p> <p></p>"},{"location":"docstring/samples.sample_table_processor/#function-write","title":"function <code>write</code>","text":"<pre><code>write(\n    df: DataFrame,\n    path: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli/sample_table.tsv'),\n    mapping: Optional[Mapping] = None,\n    columns: Optional[Sequence] = None\n) \u2192 None\n</code></pre> <p>Write sample table. </p> <p>Args:</p> <ul> <li><code>df</code>:  Pandas <code>DataFrame</code> object to write. </li> <li><code>path</code>:  Path to write sample table to. </li> <li><code>mapping</code>:  Optional mapping of column names to rename columns. </li> <li><code>columns</code>:  Optional list of sample table columns to write. Columns  will be written in the specified order. Missing columns will  be created with empty strings. If not provided, all columns  will be written. Column selection will occur after column  renaming. </li> </ul>"},{"location":"docstring/snakemake.config_file_processor/","title":"Snakemake.config file processor","text":""},{"location":"docstring/snakemake.config_file_processor/#module-snakemakeconfig_file_processor","title":"module <code>snakemake.config_file_processor</code>","text":"<p>Snakemake config file processor. </p> <p></p>"},{"location":"docstring/snakemake.config_file_processor/#class-configfileprocessor","title":"class <code>ConfigFileProcessor</code>","text":"<p>Write Snakemake configuration files. </p> <p>Args:</p> <ul> <li><code>content</code>:  Configuration file contents. </li> </ul> <p>Attributes:</p> <ul> <li><code>content</code>:  Configuration file contents. </li> </ul> <p></p>"},{"location":"docstring/snakemake.config_file_processor/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre> <p>Class constructor method. </p> <p></p>"},{"location":"docstring/snakemake.config_file_processor/#method-set_content","title":"method <code>set_content</code>","text":"<pre><code>set_content(content: ConfigFileContent) \u2192 None\n</code></pre> <p>Set content from object. </p> <p>Args:</p> <ul> <li><code>content</code>:  <code>ConfigFileContent</code> object. </li> </ul> <p></p>"},{"location":"docstring/snakemake.config_file_processor/#method-write","title":"method <code>write</code>","text":"<pre><code>write(path, exclude_none=False) \u2192 None\n</code></pre> <p>Write Snakemake configuration file in YAML format. </p> <p>Args:</p> <ul> <li><code>path</code>:  Path to run configuration file. </li> <li><code>exclude_none</code>:  Do not write fields that are set to <code>None</code>. </li> </ul>"},{"location":"docstring/snakemake/","title":"Snakemake","text":""},{"location":"docstring/snakemake/#module-snakemake","title":"module <code>snakemake</code>","text":"<p>Subpackage for ZARP-cli interaction with Snakemake. </p>"},{"location":"docstring/snakemake.run/","title":"Snakemake.run","text":""},{"location":"docstring/snakemake.run/#module-snakemakerun","title":"module <code>snakemake.run</code>","text":"<p>Module for executing Snakemake workflows. </p>"},{"location":"docstring/snakemake.run/#global-variables","title":"Global Variables","text":"<ul> <li>DUMMY_DATA</li> </ul>"},{"location":"docstring/snakemake.run/#class-snakemakeexecutor","title":"class <code>SnakemakeExecutor</code>","text":"<p>Run snakemake with system calls. </p> <p>Args:</p> <ul> <li><code>run_config</code>:  Run-specific parameters. </li> <li><code>exec_dir</code>:  Directory in which the run is executed. </li> <li><code>config_file</code>:  Path to Snakemake configuration file. </li> <li><code>bind_paths</code>:  Paths to bind to Singularity container. </li> </ul> <p>Attributes:</p> <ul> <li><code>run_config</code>:  Run-specific parameters. </li> <li><code>exec_dir</code>:  Directory in which the run is executed. </li> <li><code>config_file</code>:  Path to Snakemake configuration file. </li> <li><code>bind_paths</code>:  Paths to bind to Singularity container. </li> <li><code>run_state</code>:  State of the run. </li> </ul> <p></p>"},{"location":"docstring/snakemake.run/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    run_config: ConfigRun,\n    exec_dir: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli'),\n    config_file: Optional[Path] = None,\n    bind_paths: Optional[List[Path]] = None\n) \u2192 None\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/snakemake.run/#method-compile_command","title":"method <code>compile_command</code>","text":"<pre><code>compile_command(snakefile: Path) \u2192 List[str]\n</code></pre> <p>Compile Snakemake command as list of strings. </p> <p>Args:</p> <ul> <li><code>snakefile</code>:  Path to Snakemake descriptor file. </li> </ul> <p></p>"},{"location":"docstring/snakemake.run/#method-run","title":"method <code>run</code>","text":"<pre><code>run(cmd) \u2192 None\n</code></pre> <p>Run Snakemake command. </p> <p>Run Snakemake workflow with a system call. The run state is set to <code>SUCCESS</code> if the run was successful, and to <code>ERROR</code> if the run failed. </p> <p>Args:</p> <ul> <li><code>cmd</code>:  Snakemake command as list of strings. </li> </ul> <p>Raises:</p> <ul> <li><code>CalledProcessError</code>:  If the Snakemake run failed. </li> </ul>"},{"location":"docstring/utils/","title":"Utils","text":""},{"location":"docstring/utils/#module-utils","title":"module <code>utils</code>","text":"<p>ZARP-cli utilities. </p>"},{"location":"docstring/utils/#global-variables","title":"Global Variables","text":"<ul> <li>columns_zarp_path</li> </ul>"},{"location":"docstring/utils/#function-generate_id","title":"function <code>generate_id</code>","text":"<pre><code>generate_id(length: int = 6) \u2192 str\n</code></pre> <p>Generate random string. </p> <p>Args:</p> <ul> <li><code>length</code>:  Length of string to generate. </li> </ul> <p>Returns:  Random string of specified length, composed of uppercase ASCII  characters and digits. </p> <p></p>"},{"location":"docstring/utils/#function-list_get","title":"function <code>list_get</code>","text":"<pre><code>list_get(_list: Sequence[Any], index: int, default: Any = None) \u2192 Any\n</code></pre> <p>Get an item from a list by index or return a default value. </p> <p>Args:</p> <ul> <li><code>_list</code>:  List from which to return item. </li> <li><code>index</code>:  Index of item to return. </li> <li><code>default</code>:  Default value to return if index is out of range. </li> </ul> <p></p>"},{"location":"docstring/utils/#function-remove_none","title":"function <code>remove_none</code>","text":"<pre><code>remove_none(obj: Any) \u2192 Dict\n</code></pre> <p>Remove <code>None</code> values from a (nested) dictionary. </p> <p>Args:</p> <ul> <li><code>obj</code>:  Dictionary object to remove <code>None</code> values from. </li> </ul> <p>Returns:  Object with <code>None</code> values removed if <code>obj</code> is a dictionary, else  <code>obj</code> is returned unmodified. </p> <p></p>"},{"location":"docstring/utils/#function-resolve_paths","title":"function <code>resolve_paths</code>","text":"<pre><code>resolve_paths(\n    df: DataFrame,\n    anchor: Path = PosixPath('/home/runner/work/zarp-cli/zarp-cli'),\n    path_columns: Sequence = ('fq1', 'fq2', 'gtf', 'genome')\n) \u2192 DataFrame\n</code></pre> <p>Resolve relative sample paths against a defined anchor. </p> <p>Absolute paths and non-string or path-like objects are not modified. </p> <p>Args:</p> <ul> <li><code>df</code>:  Pandas <code>DataFrame</code> object. </li> <li><code>anchor</code>:  Path to resolve sample paths relative to. </li> <li><code>columns</code>:  Tuple of column names to resolve. </li> </ul> <p>Returns:  Pandas <code>DataFrame</code> object. </p> <p></p>"},{"location":"docstring/utils/#function-sanitize_strings","title":"function <code>sanitize_strings</code>","text":"<pre><code>sanitize_strings(value: Union[float, int, str]) \u2192 str\n</code></pre> <p>Sanitize strings. </p> <p>Convert numeric values to strings, replace spaces with underscores, and convert to lowercase. </p> <p>Args:</p> <ul> <li><code>value</code>:  Value to sanitize. </li> </ul> <p>Returns:  Sanitized string. </p> <p>Raises:</p> <ul> <li><code>TypeError</code>:  If <code>value</code> is not a string, float, or integer. </li> </ul>"},{"location":"docstring/version/","title":"Version","text":""},{"location":"docstring/version/#module-version","title":"module <code>version</code>","text":"<p>Single source of truth for package version. </p>"},{"location":"docstring/zarp/","title":"Zarp","text":""},{"location":"docstring/zarp/#module-zarp","title":"module <code>zarp</code>","text":"<p>Main class and entry point when imported as a library. </p>"},{"location":"docstring/zarp/#global-variables","title":"Global Variables","text":"<ul> <li>config</li> <li>utils</li> <li>version</li> <li>plugins</li> <li>abstract_classes</li> <li>samples</li> <li>snakemake</li> <li>runner</li> <li>zarp</li> <li>models</li> </ul>"},{"location":"docstring/zarp/#class-zarp","title":"class <code>ZARP</code>","text":"<p>Handle ZARP workflow execution. </p> <p>Args:</p> <ul> <li><code>config</code>:  ZARP-cli configuration. </li> </ul> <p>Attributes:</p> <ul> <li><code>config</code>:  ZARP-cli configuration. </li> </ul> <p></p>"},{"location":"docstring/zarp/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(config: Config)\n</code></pre> <p>Class constructor. </p> <p></p>"},{"location":"docstring/zarp/#method-execute_run","title":"method <code>execute_run</code>","text":"<pre><code>execute_run(samples: SampleRecordProcessor) \u2192 None\n</code></pre> <p>Execute run. </p> <p>Args:</p> <ul> <li><code>samples</code>:  Sample record processor instance. </li> </ul> <p></p>"},{"location":"docstring/zarp/#method-process_samples","title":"method <code>process_samples</code>","text":"<pre><code>process_samples() \u2192 SampleRecordProcessor\n</code></pre> <p>Process samples. </p> <p>Returns:   Sample record processor instance. </p> <p></p>"},{"location":"docstring/zarp/#method-set_up_run","title":"method <code>set_up_run</code>","text":"<pre><code>set_up_run() \u2192 None\n</code></pre> <p>Set up run. </p> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>:  If genome assemblies map file is not found. </li> </ul>"},{"location":"guides/examples/","title":"Examples","text":"<p>Under construction</p> <p>This section is under preparation and will list a number of real-world, fully functional examples. Please stay tuned.</p>"},{"location":"guides/initialization/","title":"Initialization","text":"<p>You will need to configure ZARP-cli once to set some defaults. On this page, you will find out everything about the initialization process.</p>"},{"location":"guides/initialization/#configuring-zarp-cli","title":"Configuring ZARP-cli","text":"<p>The following simple command triggers the ZARP-cli initialization mode:</p> <pre><code>zarp --init\n</code></pre> <p>An interactive screen will guide you through the process. Read on to find out more about what each of the available options and suggested defaults mean.</p> Where is the configuration stored? <p>The initialization process creates a <code>.zarp/</code> directory in your home directory and populates a configuration file with user defaults in <code>~/.zarp/user.yaml</code>.</p> I did not specify the <code>--init</code> option - why am I in init mode? <p>You may have inadvertently deleted or renamed the <code>~/.zarp/</code> directory or the ZARP-cli configuration file expected at <code>~/.zarp/user.yaml</code>. If this file is absent or inaccessible, ZARP-cli will trigger the initialization mode, even if it was started in normal mode.</p>"},{"location":"guides/initialization/#configuration-options","title":"Configuration options","text":"<p>The following configuration options are available.</p> <p>Press Enter to keep the suggested default</p> Option Description Default <code>working_directory</code> Root directory for ZARP-cli runs; needs to be writable <code>$HOME/.zarp</code> <code>zarp_directory</code> Path to the local copy of the ZARP workflow repository <code>../zarp</code> relative to the location of the ZARP-cli repository <code>execution_mode</code> Trigger a full ZARP-cli run (<code>RUN</code>), a dry run (<code>DRY_RUN</code>; external tools are not actually run, only logs what would be run; useful for testing) or prepare a ZARP run (<code>PREPARE_RUN</code>; ZARP-cli is run normally, including all external tools, up until the point of the execution of the actual ZARP workflow; use to manually check metadata table before execution) <code>RUN</code> <code>cores</code> Number of CPU cores that Snakemake is run with when executing ZARP and the auxiliary workflows (fetching libraries from SRA, inferring metadata) <code>1</code> <code>dependency_embedding</code> Whether Snakemake should use <code>CONDA</code> or containers (<code>SINGULARITY</code>) to manage dependencies of each workflow step/rule (note that the auxiliary workflows currently have restrictions on which dependency embedding strategy can be used; if an unsupported scheme is suggested, a warning is emitted and the other one is enabled by default) <code>CONDA</code> <code>genome_assemblies_map</code> A headerless 3-column semicolon-separated mapping table of organism/source trivial names (e.g., <code>homo_sapiens</code>), optional comma-separated aliases such as NCBI taxon IDs and/or organism/source short names (e.g., <code>7227,dmelanogaster</code>) and a corresponding genome assembly name (e.g., <code>GRCm39</code>); a table in the required format is shipped with ZARP_cli in the location provided in the default location; which can be amended with additional aliases; note that for <code>genomepy</code> to be able to pull genome annotations for organisms/sources that HTSinfer inferred, NCBI taxon ID aliases are required <code>./data/genome_assemblies.map</code> relative to the location of the ZARP-cli repository <code>resources_version</code> Whether to always download the latest available version of genome annotations for a given organism/source from Ensembl (enter <code>None</code>; default) or whether to use a specific version of the corresponding Ensembl database (e.g., <code>100</code>); note that the different Ensembl databases (e.g., for fungi, plants) use a different versioning scheme, so pinning a particular database version may lead to unexpected outcomes <code>None</code> <code>rule_config</code> A configuration file for the ZARP workflow that sets specific parameters for each workflow step (\"rule\"); see ZARP documentation for details <code>None</code> <code>profile</code> Path to Snakemake profile to be used for the ZARP workflow. Use this to optimize ZARP for your specific compute environment <code>fragment_length_distribution_mean</code> HTSinfer currently is unable to infer the mean of the fragment length distribution of RNA-seq libraries; however, this value is required for tools <code>kallisto</code> and <code>salmon</code> -which are executed as part of ZARP- when run on single-ended libraries only (for paired-ended libraries, the tools are able to infer this parameter from the data); the value provided here is used as a fallback if the value was not determined experimentally (e.g., with Bioanalyzer instruments) and provided via a sample table <code>300</code> <code>fragment_length_distribution_sd</code> Analogous to <code>fragment_length_distribution_mean</code> above, but this parameter is for the standard deviation of the fragment length distribution <code>100</code> <code>author</code> Name of the person or organization executing the ZARP-cli runs; will be added to the ZARP report <code>None</code> <code>email</code> Email of the person or organization executing the ZARP-cli runs; will be added to the ZARP report <code>None</code> <code>url</code> URL of the person or organization executing the ZARP-cli runs; will be added to the ZARP report <code>None</code> <code>logo</code> Logo (file path or URL) of the person or organization executing the ZARP-cli runs; will be added to the ZARP report <code>None</code>"},{"location":"guides/initialization/#modifying-configuration-settings","title":"Modifying configuration settings","text":"<p>There are two ways in which you can permanently change the default configuration settings:</p> <ul> <li>Re-run <code>zarp --init</code>   Suggested defaults are now taken from the current   contents of <code>~/.zarp/user.yaml</code>, which will then be overridden with the   values supplied during the interactive initialization mode</li> <li>Edit configuration file in a text editor   Simply edit the <code>~/.zarp/user.yaml</code> file in a text editor; however, make sure   that only valid values are provided, as inputs are not checked</li> </ul> <p>Additionally, there are ways in which you can modify configuration settings dynamically:</p> <ul> <li>Providing a custom configuration file   It is possible to specify a custom configuration file via the <code>--config-file</code> CLI parameter; this could be a copy of an old/alternative <code>~/.zarp/user.yaml</code>   file or a subset with only some of the parameters; however, the format has   to strictly follow that of the default configuration file in order for the   custom configuration file contents to take effect</li> <li>Setting individual CLI arguments ZARP-cli provides a range of run-specific CLI parameters   that, when specified, will override the default configuration settings for a   given run</li> <li>Setting sample-specific parameters in sample tables ZARP-cli's ability to process sample table allows setting of most sample-   specific parameters via ZARP sample tables</li> </ul> Configuration setting precedence <p>The ability to provide configuration settings in various ways requires us to resolve conflicting settings in a predictable and user-friendly manner. In ZARP-cli configuration settings are applied iteratively, with values sourced from a current iteration overriding those from any previous iterations. The following configuration sources are applied successively:</p> <ul> <li>Defaults hardwired in the code (lowest precedence!)</li> <li>Contents of default configuration file at <code>~/.zarp/user.yaml</code></li> <li>Contents of custom configuration file supplied via <code>--config-file</code>, if provided</li> <li>CLI arguments for individual run- and sample-specific parameters, if provided</li> <li>Sample-specific parameters specified in sample tables (highest precendence!)</li> </ul>"},{"location":"guides/installation/","title":"Installation","text":"<p>On this page, you will find out how to install ZARP-cli on your system.</p>"},{"location":"guides/installation/#requirements","title":"Requirements","text":"<p>Installation requires the following:</p> <ul> <li>Linux (tested with Ubuntu 20.04; macOS has not been tested yet)</li> <li>Conda (tested with <code>conda 22.11.1</code>)</li> <li>Mamba (tested with <code>mamba 1.3.0</code>)</li> <li>Singularity (tested with <code>singularity 3.8.6</code>; not required   if you have root permissions on the machine you would like to install   ZARP-cli on; in that case choose one of the <code>.root.</code> environment file   flavors below)</li> </ul> <p>Other versions, especially older ones, are not guaranteed to work.</p>"},{"location":"guides/installation/#installation-steps","title":"Installation steps","text":""},{"location":"guides/installation/#1-clone-zarp","title":"1. Clone ZARP","text":"<p>Clone the ZARP workflow repository with:</p> <pre><code>git clone git@github.com:zavolanlab/zarp\n# or: git clone https://github.com/zavolanlab/zarp.git\n</code></pre>"},{"location":"guides/installation/#2-clone-zarp-cli","title":"2. Clone ZARP-cli","text":"<p>Clone the ZARP-cli repository and traverse into it with:</p> <pre><code>git clone git@github.com:zavolanlab/zarp-cli.git\n# or: git clone https://github.com/zavolanlab/zarp-cli.git\ncd zarp-cli\n</code></pre>"},{"location":"guides/installation/#3-install-app-dependencies","title":"3. Install app &amp; dependencies","text":"<p>In the next step, you need to install the app with its dependencies. For that purpose, there exist four different environment files. Use this decision matrix to pick the most suitable one for you:</p> I have root privileges on the machine I want to run pre-packaged tests Environment file to use \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 <code>install/environment.yml</code> <code>install/environment.root.yml</code> <code>install/environment.dev.yml</code> <code>install/environment.dev.root.yml</code> <p>To set up the environment execute the call below, but do not forget to replace the placeholder <code>ENVIRONMENT</code> with the appropriate file from the table above:</p> <pre><code>mamba env create -f ENVIRONMENT\n</code></pre>"},{"location":"guides/installation/#4-activate-environment","title":"4. Activate environment","text":"<p>Finally, activate the Conda environment with:</p> <pre><code>conda activate zarp-cli\n</code></pre> <p>You should now be good to go to proceed with initiliaztion.</p>"},{"location":"guides/usage/","title":"Usage","text":""},{"location":"guides/usage/#how-does-the-zarp-cli-work","title":"How does the ZARP-cli work?","text":"<p>The <code>zarp</code> command accepts two kinds of arguments:</p> <ul> <li>Positional arguments: All positional arguments are interpreted as sample   references, which can be paths to local RNA-Seq library files, paths to   sample tables, or \"run identifiers\" assigned by either the Sequence Read   Archive (SRA), the DNA Data Bank of Japan (DDBJ), or the   European Nucleotide Archive (ENA). See below for   a detailed description of the sample reference syntax.</li> <li>Command-line options: Optional arguments of the form <code>--optional-arg</code>,   which either modify ZARP-cli's behavior or assign sample-, run- or user-   specific metadata globally to all samples of a given ZARP-cli run. See   below for a more detailed description of command-line   options.</li> </ul>"},{"location":"guides/usage/#sample-references","title":"Sample references","text":"<p>The table below gives an overview of the supported basic sample reference types:</p> Type Note Examples Path to local RNA-Seq library Both absolute and relative paths are supported <code>/path/to/library_1.fq.gz</code>, <code>library_2.fq.gz</code> Path to local ZARP sample table Both absolute and relative paths are supported <code>table:/path/to/sample/table_1.tsv</code>, <code>table:table_2.tsv</code> SRA/DDBJ/ENA identifier Valid identifiers need to be matched by the following regular expression: <code>(E|D|S)RR[0-9]{6,}</code> <code>SRR123456</code>, <code>DRR7654321</code> <p>The above basic types can further be amended by the following syntax fragments for further annotation:</p> Syntax Description Examples <code>PATH,PATH</code> Exactly two paths, separated by a comma and no white space, signify the two separate files for a paired-ended sequencing library; absolute and relative paths and mixes thereof are supported <code>/tmp/m1.fq.gz,/tmp/m2.fq.gz</code>, <code>mate_1.fq.gz,mate_2.fq.gz</code>, <code>mate_1.fq.gz,/tmp/m2.fq.gz</code> <code>NAME@REF</code> A string separated from a non-table sample reference via the @ specifies a sample name (if not provided, a sanitized form of the base name of the file path is used) <code>se_sample@lib.fq.gz</code>, <code>pe_sample@m1.fq.gz,m2.fq.gz</code>, <code>remote_sample@ERR11223344</code> <p>Different sample references can of course be mixed and matched to your heart's content!</p>"},{"location":"guides/usage/#command-line-options","title":"Command-line options","text":"<p>Available command-line parameters are grouped into the following sections:</p> Section Description General Next to sample references (the only required parameters!), these currently include the verbosity level and an option to provide a custom configuration file Run modes These parameters execute ZARP-cli in special modes, e.g., for initialization or to display the help screen Sample-specific These parameters modify globally set metadata for all samples of a run, unless overridden inside provided sample tables Run-specific These parameters modify the behavior of ZARP-cli or set metadata to describe runs User-specific These parameters will be included in the ZARP report, if available <p>A complete listing of all available CLI options can easily be printed to the screen, together with detailed descriptions, with the following command and will therefore not be repeated here:</p> <pre><code>zarp --help\n</code></pre>"},{"location":"guides/usage/#using-the-api","title":"Using the API","text":"<p>Next to using ZARP-cli's eponymous command-line interface, you can also integrate ZARP-cli's functionalities into your Python projects via its API.</p> <p>The main entry point for ZARP-cli's high-level functionalities is the  <code>zarp.zarp.ZARP</code> class.</p> <p>A basic code snippet to trigger ZARP runs in your code might look like this:</p> <pre><code>from zarp.zarp import ZARP\n\n# set up ZARP-cli configuration and attach sample references (not shown)\n\nzarp = ZARP(config=config)\nzarp.set_up_run()\nsamples = zarp.process_samples()\nzarp.execute_run(samples=samples)\n</code></pre> Configuring <code>zarp.zarp.ZARP</code> <p>To configure <code>zarp.zarp.ZARP</code>, have a look at the  <code>zarp.config.parser.ConfigParser</code> class and the <code>zarp.config.models.Config</code> model.</p> <p>A reference to the entire ZARP-cli API is provided in the API overview.</p>"}]}